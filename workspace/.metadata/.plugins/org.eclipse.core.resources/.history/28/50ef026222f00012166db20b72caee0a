/*****************************************************************************
 *   adc.c:  ADC module file for NXP LPC17xx Family Microprocessors
 *
 *   Copyright(C) 2009, NXP Semiconductor
 *   All rights reserved.
 *
 *   History
 *   2009.05.25  ver 1.00    Prelimnary version, first Release
 *
******************************************************************************/
#include "LPC17xx.h"
#include "type.h"
#include "adc.h"
#include "debug.h"

extern volatile uint32_t timer0_m0_counter;

volatile uint8_t vectorActivo = 1;
volatile uint8_t vectorReady = 0;
//volatile uint32_t VectorTiempo1[MAX_TAMANIO];
//volatile uint32_t VectorTiempo2[MAX_TAMANIO];
volatile uint32_t ADC0Value[ADC_NUM];
volatile uint32_t ADC0IntDone = 0;

volatile uint32_t overrun = 0;
volatile uint32_t goodmeasures = 0;

#if BURST_MODE
volatile uint32_t channel_flag; 
#endif

#if ADC_INTERRUPT_FLAG
/******************************************************************************
** Function name:		ADC_IRQHandler
**
** Descriptions:		ADC interrupt handler
**
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void ADC_IRQHandler (void)  
{
  uint32_t regVal;
  static int32_t last = 0;
  
  regVal = LPC_ADC->ADSTAT;		/* Read ADC will clear the interrupt */
  if ( regVal & 0x0000FF00 )	/* check OVERRUN error first */
  {
	regVal = (regVal & 0x0000FF00) >> 0x08;
	/* if overrun, just read ADDR to clear */
	/* regVal variable has been reused. */
	switch ( regVal )
	{
	  case 0x01:
		regVal = LPC_ADC->ADDR0;
		overrun++;
	  break;
	  case 0x02:
		regVal = LPC_ADC->ADDR1;
	  break;
	  case 0x04:
		regVal = LPC_ADC->ADDR2;
	  break;
	  case 0x08:
		regVal = LPC_ADC->ADDR3;
	  break;
	  case 0x10:
		regVal = LPC_ADC->ADDR4;
	  break;
	  case 0x20:
		regVal = LPC_ADC->ADDR5;
	  break;
	  case 0x40:
		regVal = LPC_ADC->ADDR6;
	  break;
	  case 0x80:
		regVal = LPC_ADC->ADDR7;
	  break;
	  default:
	  break;
	}
	LPC_ADC->ADCR &= 0xF8FFFFFF;	/* stop ADC now */ 
	ADC0IntDone = 1;
	return;
  }

  uint32_t flag = 0;
  if ( regVal & ADC_ADINT )
  {
	switch ( regVal & 0xFF )	/* check DONE bit */
	{
	  case 0x01: //Si hay interrupcion en el ADC guarda en ADCValue los primeros 12bits que representan la conversion ( los primeros 4 son reservados)
		  if(vectorActivo == 1)
		  {
			  VectorMedicionesMain[last] = ( LPC_ADC->ADDR0 >> 4 ) & 0xFFF;
	  	  	  //VectorTiempo1[last] = timer0_m0_counter;
	  	  	  goodmeasures++;
		  }
		  else if(vectorActivo == 2)
		  {
			  VectorMedicionesMain[last] = ( LPC_ADC->ADDR0 >> 4 ) & 0xFFF;
			  //VectorTiempo2[last] = timer0_m0_counter;
			  goodmeasures++;

		  }
		  else
		  {
			  ADC0Value[0] = ( LPC_ADC->ADDR0 >> 4 ) & 0xFFF;
			  vectorReady = 1;
			  goodmeasures++;
			  return;
		  }
		  break;
	  default:
		  break;
	}

	last++;

	if( last == (MAX_TAMANIO/2) || last ==(MAX_TAMANIO-1) )
	{
		if(vectorActivo == 1)
		{
			vectorReady = 1;
			vectorActivo = 2;
		}
		else
		{
			vectorReady = 2;
			vectorActivo = 1;
			last = 0;
		}
	}

	/*
#if ~BURST_MODE
	LPC_ADC->ADCR &= 0xF8FFFFFF;
	ADC0IntDone = 1;
#endif
	*/
  }

/*#ifdef DEBUG
    	debug_printf("Entro al IRQHandler:%d\n", count);
    	debug_printf_flush();
#endif*/

  return;
}
#endif

/*****************************************************************************
** Function name:		ADCInit
**
** Descriptions:		initialize ADC channel
**
** parameters:			ADC clock rate
** Returned value:		true or false
** 
*****************************************************************************/
uint32_t ADCInit( uint32_t ADC_Clk )
{
  uint32_t pclkdiv, pclk;

  /* Enable CLOCK into ADC controller */
  LPC_SC->PCONP |= (1 << 12);

  /* all the related pins are set to ADC inputs, AD0.0~7 */

  LPC_PINCON->PINSEL1 |= 0x00004000;	/* Configuring P0.23 as ADC0 input (function 01) */
  //LPC_PINCON->PINMODE1 = 0x0000C000;	/* Configuring P0.23 without pull up or pull down (function 01) */
  //LPC_PINCON->PINSEL1 |= 0x00010000;	/* Configuring P0.23 as ADC0 input (function 01) */


  /* By default, the PCLKSELx value is zero, thus, the PCLK for
  all the peripherals is 1/4 of the SystemFrequency. */
  /* Bit 25~24 is for ADC */
  LPC_SC->PCLKSEL0 &= ~( 0x01 << 25);
  LPC_SC->PCLKSEL0 &= ~( 0x01 << 24);
  pclkdiv = (LPC_SC->PCLKSEL0 >> 24) & 0x03;
  switch ( pclkdiv )
  {
	case 0x00:
	  pclk = SystemCoreClock/4;
	break;
	case 0x01:
	  pclk = SystemCoreClock;
	break; 
	case 0x02:
	  pclk = SystemCoreClock/2;
	break; 
	case 0x03:
	  pclk = SystemCoreClock/8;
	break;
  }

  LPC_ADC->ADCR = ( 0x01 << 0 ) | 	/* SEL=1,select channel 0 on ADC0 */
		( ( 1 ) << 8 ) |  /* ADC_Clk = pclk /  (CLKDIV + 1) ------->  CLKDIV = (pclk/ADC_Clk) - 1   */
		( BURST_MODE << 16 ) | 		/* BURST = 0, no BURST, software controlled */
		( 1 << 21 ) |  		/* PDN = 1, normal operation */
		( 0 << 24 ) |  		/* START = 0 A/D conversion stops */
		( 0 << 25 ) |
		( 0 << 26 ) |
		( 0 << 27 );		/* EDGE = 0 (CAP/MAT singal falling,trigger A/D conversion) */ 

  /* If POLLING, no need to do the following */
#if ADC_INTERRUPT_FLAG
  LPC_ADC->ADINTEN = 0x01;		/* Enable only ADC channel 0 interruptions */
  NVIC_EnableIRQ(ADC_IRQn);
#endif

  return (TRUE);
}

/*****************************************************************************
** Function name:		ADC0Read
**
** Descriptions:		Read ADC0 channel
**
** parameters:			Channel number
** Returned value:		Value read, if interrupt driven, return channel #
** 
*****************************************************************************/
uint32_t ADC0Read( uint8_t channelNum )
{
#if !ADC_INTERRUPT_FLAG
  uint32_t regVal, ADC_Data;
#endif

  /* channel number is 0 through 7 */
  if ( channelNum >= ADC_NUM )
  {
	channelNum = 0;		/* reset channel number to 0 */
  }
  LPC_ADC->ADCR &= 0xFFFFFF00;
  LPC_ADC->ADCR |= (1 << 24) | (1 << channelNum);	
				/* switch channel,start A/D convert */
#if !ADC_INTERRUPT_FLAG
  while ( 1 )			/* wait until end of A/D convert */
  {
	regVal = *(volatile unsigned long *)(LPC_ADC_BASE 
			+ ADC_OFFSET + ADC_INDEX * channelNum);
	/* read result of A/D conversion */
	if ( regVal & ADC_DONE )
	{
	  break;
	}
  }	
        
  LPC_ADC->ADCR &= 0xF8FFFFFF;	/* stop ADC now */    
  if ( regVal & ADC_OVERRUN )	/* save data when it's not overrun, otherwise, return zero */
  {
	return ( 0 );
  }
  ADC_Data = ( regVal >> 4 ) & 0xFFF;
  return ( ADC_Data );	/* return A/D conversion value */
#else
  return ( channelNum );	/* if it's interrupt driven, the ADC reading is 
							done inside the handler. so, return channel number */
#endif
}

/*****************************************************************************
** Function name:		ADC0BurstRead
**
** Descriptions:		Use burst mode to convert multiple channels once.
**
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void ADCBurstRead( void )
{
  if ( LPC_ADC->ADCR & (0x7<<24) )
  {
	LPC_ADC->ADCR &= ~(0x7<<24);
  }
  /* Test channel 5,6,7 using burst mode because they are not shared
  with the JTAG pins. */
  LPC_ADC->ADCR &= ~0xFF;
  /* Read all channels, 0 through 7. */
  LPC_ADC->ADCR |= (0x01);
  LPC_ADC->ADCR |= (0x1<<16);	/* Set burst mode and start A/D convert */
  return;						/* the ADC reading is done inside the 
								handler, return 0. */
}

/*********************************************************************************
**                            End Of File
*********************************************************************************/
